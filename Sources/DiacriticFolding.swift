import Foundation

// https://www.unicode.org/reports/tr30/datafiles/DiacriticFolding.txt

public extension String {
  func diacriticFolding(locale: Locale? = nil) -> Self {
    self
      .replacingOccurrences(of: "Ǿ", with: "O")
      .replacingOccurrences(of: "ǿ", with: "o")
      .replacingOccurrences(of: "Ɓ", with: "B")
      .replacingOccurrences(of: "Ƃ", with: "B")
      .replacingOccurrences(of: "Ƈ", with: "C")
      .replacingOccurrences(of: "Đ", with: "D")
      .replacingOccurrences(of: "Ɗ", with: "D")
      .replacingOccurrences(of: "Ƌ", with: "D")
      .replacingOccurrences(of: "Ƒ", with: "F")
      .replacingOccurrences(of: "Ɠ", with: "G")
      .replacingOccurrences(of: "Ǥ", with: "G")
      .replacingOccurrences(of: "Ħ", with: "H")
      .replacingOccurrences(of: "Ɨ", with: "I")
      .replacingOccurrences(of: "Ƙ", with: "K")
      .replacingOccurrences(of: "Ł", with: "L")
      .replacingOccurrences(of: "Ɲ", with: "N")
      .replacingOccurrences(of: "Ƞ", with: "N")
      .replacingOccurrences(of: "Ø", with: "O")
      .replacingOccurrences(of: "Ɵ", with: "O")
      .replacingOccurrences(of: "Ƥ", with: "P")
      .replacingOccurrences(of: "Ŧ", with: "T")
      .replacingOccurrences(of: "Ƭ", with: "T")
      .replacingOccurrences(of: "Ʈ", with: "T")
      .replacingOccurrences(of: "Ʋ", with: "V")
      .replacingOccurrences(of: "Ƴ", with: "Y")
      .replacingOccurrences(of: "Ƶ", with: "Z")
      .replacingOccurrences(of: "Ȥ", with: "Z")
      .replacingOccurrences(of: "ẚ", with: "a")
      .replacingOccurrences(of: "ƀ", with: "b")
      .replacingOccurrences(of: "ƃ", with: "b")
      .replacingOccurrences(of: "ɓ", with: "b")
      .replacingOccurrences(of: "ƈ", with: "c")
      .replacingOccurrences(of: "ɕ", with: "c")
      .replacingOccurrences(of: "đ", with: "d")
      .replacingOccurrences(of: "ƌ", with: "d")
      .replacingOccurrences(of: "ȡ", with: "d")
      .replacingOccurrences(of: "ɖ", with: "d")
      .replacingOccurrences(of: "ɗ", with: "d")
      .replacingOccurrences(of: "ƒ", with: "f")
      .replacingOccurrences(of: "ǥ", with: "g")
      .replacingOccurrences(of: "ɠ", with: "g")
      .replacingOccurrences(of: "ħ", with: "h")
      .replacingOccurrences(of: "ɦ", with: "h")
      .replacingOccurrences(of: "ɨ", with: "i")
      .replacingOccurrences(of: "ʝ", with: "j")
      .replacingOccurrences(of: "ƙ", with: "k")
      .replacingOccurrences(of: "ŀ", with: "l")
      .replacingOccurrences(of: "ł", with: "l")
      .replacingOccurrences(of: "ƚ", with: "l")
      .replacingOccurrences(of: "ȴ", with: "l")
      .replacingOccurrences(of: "ɫ", with: "l")
      .replacingOccurrences(of: "ɬ", with: "l")
      .replacingOccurrences(of: "ɭ", with: "l")
      .replacingOccurrences(of: "ɱ", with: "m")
      .replacingOccurrences(of: "ƞ", with: "n")
      .replacingOccurrences(of: "ȵ", with: "n")
      .replacingOccurrences(of: "ɲ", with: "n")
      .replacingOccurrences(of: "ɳ", with: "n")
      .replacingOccurrences(of: "ø", with: "o")
      .replacingOccurrences(of: "ƥ", with: "p")
      .replacingOccurrences(of: "ʠ", with: "q")
      .replacingOccurrences(of: "ɼ", with: "r")
      .replacingOccurrences(of: "ɽ", with: "r")
      .replacingOccurrences(of: "ʂ", with: "s")
      .replacingOccurrences(of: "ŧ", with: "t")
      .replacingOccurrences(of: "ƫ", with: "t")
      .replacingOccurrences(of: "ƭ", with: "t")
      .replacingOccurrences(of: "ȶ", with: "t")
      .replacingOccurrences(of: "ȶ", with: "t")
      .replacingOccurrences(of: "ʈ", with: "t")
      .replacingOccurrences(of: "ʋ", with: "v")
      .replacingOccurrences(of: "ƴ", with: "y")
      .replacingOccurrences(of: "ƶ", with: "z")
      .replacingOccurrences(of: "ȥ", with: "z")
      .replacingOccurrences(of: "ʐ", with: "z")
      .replacingOccurrences(of: "ʑ", with: "z")
      .folding(options: .diacriticInsensitive, locale: locale)
  }
}
